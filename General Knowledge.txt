# What is the difference between context API and redux?

The main difference between the Context API and Redux is that the Context API is built into React and is focused on providing a way to pass data  
through the component tree without having to pass props down manually at every level. Redux, on the other hand, is an external library that provides  
a centralized state management solution and is used for more complex applications that require a global state.  

# what is redux toolkit?

Redux Toolkit is a new official library from the Redux team that is intended to make it easier to write applications with Redux.  
It provides a set of tools and APIs that make it easier to write Redux logic, such as creating reducers, composing reducers, creating action creators,  
and much more. It also includes several other features, such as support for middleware and data fetching.  

# Give me a code of react.js with redux

import React from 'react';
import { connect } from 'react-redux';

// Component
class Counter extends React.Component {
  constructor(props) {
    super(props);

    this.increment = this.increment.bind(this);
    this.decrement = this.decrement.bind(this);
  }

  increment() {
    this.props.dispatch({ type: 'INCREMENT' });
  }

  decrement() {
    this.props.dispatch({ type: 'DECREMENT' });
  }

  render() {
    return (
      <div>
        <h2>Counter</h2>
        <div>
          <button onClick={this.decrement}>-</button>
          <span>{this.props.count}</span>
          <button onClick={this.increment}>+</button>
        </div>
      </div>
    );
  }
}

kindly give me a solid example of the useMemo hook of react.js.

The useMemo hook in React can be used to optimize the performance of a component by memoizing expensive calculations. For example, if a component needs to calculate the sum of an array of numbers, the useMemo hook can be used to store the result of the calculation and avoid recalculating it every time the component renders.

const numbers = [1, 2, 3, 4];

const sum = React.useMemo(() => {
  let result = 0;
  numbers.forEach(number => {
    result += number;
  });
  return result;
}, [numbers]);

# Give me an example of the useEffect hook of react.js.

The useEffect hook in React can be used to perform side effects, such as making API calls or subscribing to event listeners, when a component renders.  
For example, if a component needs to make an API call when it renders, the useEffect hook can be used to make the API call:

React.useEffect(() => {
  fetch('https://example.com/api')
    .then(response => response.json())
    .then(data => {
      // do something with the data
    });
}, []);

# UseEffect hook example in a subscribing an event listener

React.useEffect(() => {
  document.addEventListener('click', handleClick);
  return () => {
    document.removeEventListener('click', handleClick);
  };
}, []);

function handleClick() {
  // do something on click
}
